#lang racket
(define (chkexp target)
  (lambda (e v)
    (when (eq? v target)
      ;; (write e)
      ;; (newline)
      '()
      )))

(define (exchangeable op)
  (not (member op (list - /))))

(define (iter-all-exp f ops ns e v)
  (if (null? ns)
      (f e v)
      (for ((r (remove-duplicates ns)))
	   (let ((nss (remove r ns)))
	     (for ((op ops))
		  (iter-all-exp f ops nss (list op e r) (op v r))
		  (unless (exchangeable op)
		    (iter-all-exp f ops nss (list op r e) (op r v))))))
      ))

(let ((ns (list 3 4 5 6 7 8))
      (f (chkexp 24))
      (ops (list + - * /)))
  (for ((r (remove-duplicates ns)))
       (iter-all-exp f ops (remove r ns) r r)))
